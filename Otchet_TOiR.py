# -*- coding: utf-8 -*-
"""
Created on Fri Sep 10 20:39:53 2021

@author: Serg
"""
###########################################################################
"""
Формированние данных отчета
""" 

# Импорты

import pandas as pd
import re          #регулярные выражения\d*#
import time

# Переменные

File = 'C:\\Users\\Serg\\notebook\\Шедуле.XLSX'
DataOtcheta = '18.07.2021'
RES_list = [61370000, 61380000, 61390000, 61400000, 61410000, 61420000, 61430000, 61440000, 61450000, 61460000, 61470000]

# Подготовка данных для обработки

df = pd.read_excel(File, index_col='Заказ')
df['Перерасчетный заказ'] = [str(item) for item in df['Перерасчетный заказ']]                      # преобразование значений в строки построчно, т.к. str.contains работает только со строками
df['ТМ для ПС'] = df['Наименование ТМ верхнего уровня'] + ', ' + df['Название технического места'] # добавление нового столбца, состоящего из 2х имеющихся и пробела - для идентификации объектов ПС

# Формирование отчетов - таблиц по показателям

def planfact(RES):                                                              # Функция вычисления план факта по РЭС
         # расчистка план
    pl1 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'].str.contains("PMR[KT]")) &\
                  (df['Вышестоящее ТехМесто'].str.contains('V[LSN]')) &\
                  (df['Ключ образца'].str.contains('PMVL00[123]')) &\
                  (df['Перерасчетный заказ'].str.contains("\d0[1234]1\d{8}"))]\
              ['План ФП НУ'].sum()  # в 'Перерасчетный заказ' 1я цифра- любая, 2я 0, 3я одна из (1,2,3,4), 4я 1 (собственность), 8 остальных - любые
         # расчистка факт
    ft1 = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Вышестоящее ТехМесто'].str.contains('V[LSN]')) &\
                  (df['Ключ образца'].str.contains('PMVL00[123]')) &\
                  (df['Перерасчетный заказ'].str.contains("\d0[1234]1\d{8}"))]\
             ['Факт ФП НУ'].sum() # в 'Перерасчетный заказ' 1я цифра- любая, 2я 0, 3я одна из (1,2,3,4), 4я 1 (собственность), 8 остальных - любые
        # Замена грозотроса план
    pl2 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'].str.contains("PMR[KT]")) &\
                  (df['Вышестоящее ТехМесто'].str.contains('VL')) &\
                  (df['Ключ образца'] =='PMVL005') &\
                  (df['Перерасчетный заказ'].str.contains("\d0[34]1\d{8}"))]\
              ['План ФП НУ'].sum()
        # Замена грозотроса факт
    ft2 = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Вышестоящее ТехМесто'].str.contains('VL')) &\
                  (df['Ключ образца'] == 'PMVL005') &\
                  (df['Перерасчетный заказ'].str.contains("\d0[34]1\d{8}"))]\
             ['Факт ФП НУ'].sum()
        # Замена изоляторов план
    pl3 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'].str.contains("PMR[KT]")) &\
                  (df['Вышестоящее ТехМесто'].str.contains('V[LSN]')) &\
                  (df['Ключ образца'].str.contains('PMVL004')|df['Ключ образца'].str.contains('PMVL03[12]')) &\
                  (df['Перерасчетный заказ'].str.contains("\d0[1234]1\d{8}"))]\
              ['План ФП НУ'].sum()
        # Замена изоляторов факт
    ft3 = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Вышестоящее ТехМесто'].str.contains('V[LSN]')) &\
                  (df['Ключ образца'].str.contains('PMVL004')|df['Ключ образца'].str.contains('PMVL03[12]')) &\
                  (df['Перерасчетный заказ'].str.contains("\d0[1234]1\d{8}"))]\
             ['Факт ФП НУ'].sum()
        # Ремонт ВЛ 35-110 план
    pl4 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'].str.contains("PMR[KT]")) &\
                  (df['Вышестоящее ТехМесто'].str.contains('VL')) &\
                  (df['Ключ образца'] =='PMVL019') &\
                  (df['Перерасчетный заказ'].str.contains("\d0[34]1\d{8}"))]\
              ['План ФП НУ'].sum()
        # Ремонт ВЛ 35-110 факт
    ft4 = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Вышестоящее ТехМесто'].str.contains('VL')) &\
                  (df['Ключ образца'] == 'PMVL019') &\
                  (df['Перерасчетный заказ'].str.contains("\d0[34]1\d{8}"))]\
             ['Факт ФП НУ'].sum()
        # Ремонт ВЛ 0,4-10 план
    pl5 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'].str.contains("PMR[KT]")) &\
                  (df['Вышестоящее ТехМесто'].str.contains('V[SN]')) &\
                  (df['Ключ образца'] =='PMVL019') &\
                  (df['Перерасчетный заказ'].str.contains("\d0[12]1\d{8}"))]\
              ['План ФП НУ'].sum()
        # Ремонт ВЛ 0,4-10 факт
    ft5 = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Вышестоящее ТехМесто'].str.contains('V[SN]')) &\
                  (df['Ключ образца'] == 'PMVL019') &\
                  (df['Перерасчетный заказ'].str.contains("\d0[12]1\d{8}"))]\
             ['Факт ФП НУ'].sum()
        # Ремонт КЛ 0,4 и выше план
        # Неаправильно считает ХЗ как считать???
    pl6 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'].str.contains("PMR[KT]")) &\
                  (df['Ключ образца'] =='PMKL001') &\
                  (df['Перерасчетный заказ'].str.contains("\d0[6789]1\d{8}"))]\
              ['План ФП НУ'].sum()
        # Ремонт КЛ 0,4 и выше факт
        # Неаправильно считает ХЗ как считать???
    ft6 = df[ (df['Вид заказа'].str.contains("PM[R][KA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Ключ образца'] == 'PMKL001') &\
                  (df['Перерасчетный заказ'].str.contains("\d0[6789]1\d{8}"))]\
             ['Факт ФП НУ'].sum()
            # ХЗ как должно считаться
        # Ремонт силовых трансформаторов план
    pl7 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'] == "PMRK") &\
                  (df['Вышестоящее ТехМесто'].str.contains('P[SM]')) &\
                  (df['Ключ образца'] =='PMTR001') &\
                  (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
              ['План ФП НУ'].sum()
        # Ремонт силовых трансформаторов факт
    ft7 = df[ (df['Вид заказа'].str.contains("PM[RV][KA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Вышестоящее ТехМесто'].str.contains('P[SM]')) &\
                  (df['Ключ образца'] == 'PMTR001') &\
                  (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
             ['Факт ФП НУ'].sum()
        # Ремонт выключателей план
    pl8 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'] == "PMRK") &\
                  (df['Вышестоящее ТехМесто'].str.contains('PS')) &\
                  (df['Ключ образца'].str.contains('PMQF00[12347]')) &\
                  (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
              ['План ФП НУ'].sum()
        # Ремонт выключателей факт
    ft8 = df[ (df['Вид заказа'].str.contains("PM[RV][KA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Вышестоящее ТехМесто'].str.contains('PS')) &\
                  (df['Ключ образца'].str.contains('PMQF00[12347]')) &\
                  (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
             ['Факт ФП НУ'].sum()
        # Ремонт ОД, КЗ и Р план
    pl9 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'] == "PMRK") &\
                  (df['Вышестоящее ТехМесто'].str.contains('PS')) &\
                  (df['Ключ образца'].str.contains('PMQR00[12]')) &\
                  (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
              ['План ФП НУ'].sum()
        # Ремонт ОД, КЗ и Р факт
    ft9 = df[ (df['Вид заказа'].str.contains("PM[RV][KA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Вышестоящее ТехМесто'].str.contains('PS')) &\
                  (df['Ключ образца'].str.contains('PMQR00[12]')) &\
                  (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
             ['Факт ФП НУ'].sum()
        # Замена ОСИ план
    pl10 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'] == "PMRK") &\
                  (df['Вышестоящее ТехМесто'].str.contains('PS')) &\
                  (df['Ключ образца'] == "PMIZ003") &\
                  (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
              ['План ФП НУ'].sum()
        # Замена ОСИ факт
    ft10 = df[ (df['Вид заказа'].str.contains("PM[RV][KA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Вышестоящее ТехМесто'].str.contains('PS')) &\
                  (df['Ключ образца'] == "PMIZ003") &\
                  (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
             ['Факт ФП НУ'].sum()
        # Ремонт ТП план
    pl11 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'] == "PMRK") &\
                  (df['Вышестоящее ТехМесто'].str.contains('[TR]P')) &\
                  (df['Ключ образца'] == "PMTP003") &\
                  (df['Перерасчетный заказ'].str.contains("\d201\d{8}"))]\
              ['План ФП НУ'].sum()
        # Ремонт ТП факт
    ft11 = df[ (df['Вид заказа'].str.contains("PM[RV][KA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Вышестоящее ТехМесто'].str.contains('[TR]P')) &\
                  (df['Ключ образца'] == "PMTP003") &\
                  (df['Перерасчетный заказ'].str.contains("\d201\d{8}"))]\
             ['Факт ФП НУ'].sum()
        # Ремонт трансф ТП план
    pl12 = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Запланированный конец'] <= DataOtcheta) &\
                  (df['Вид заказа'] == "PMRK") &\
                  (df['Вышестоящее ТехМесто'].str.contains('[TR]P')|df['Вышестоящее ТехМесто'].str.contains('PM')) &\
                  (df['Ключ образца'] == "PMTR001") &\
                  (df['Перерасчетный заказ'].str.contains("\d201\d{8}"))]\
              ['План ФП НУ'].sum()
        # Ремонт трансф ТП факт
    ft12 = df[ (df['Вид заказа'].str.contains("PM[RV][KA]")) &\
                  (df['Местоположение'] == RES) &\
                  (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
                  (df['Вышестоящее ТехМесто'].str.contains('[TR]P')|df['Вышестоящее ТехМесто'].str.contains('PM')) &\
                  (df['Ключ образца'] == "PMTR001") &\
                  (df['Перерасчетный заказ'].str.contains("\d201\d{8}"))]\
             ['Факт ФП НУ'].sum()
 
    Planfact_Data = {
        'Наименование работ':['Расчистка трасс ВЛ','Замена грозотроса','Замена изоляторов','Ремонт ВЛ 35 кВ и выше','Ремонт ВЛ 0.4-20 кВ','Ремонт КЛ 0.4 кВ и выше','Ремонт силовых трансформаторов','Ремонт  выключателей','Ремонт ОД, КЗ, разъединителей','Замена опорно-стержневых изоляторов','Ремонт ТП (ЗТП, КТП, РП)','Ремонт трансформаторов ТП (ЗТП, КТП, РП)'],
        'Ед. изм.':['Га', 'км', 'шт', 'км', 'км', 'км', 'шт', 'шт', 'шт', 'шт', 'шт', 'шт'],
        'План с начала года':[round(pl1,2),
                              round(pl2,2),
                              round(pl3,2),
                              round(pl4,2),
                              round(pl5,2),
                              round(pl6,2),
                              round(pl7,2),
                              round(pl8,2),
                              round(pl9,2),
                              round(pl10,2),
                              round(pl11,2),
                              round(pl12,2)],
        'Факт с начала года':[round(ft1,2),
                              round(ft2,2),
                              round(ft3,2),
                              round(ft4,2),
                              round(ft5,2),
                              round(ft6,2),
                              round(ft7,2),
                              round(ft8,2),
                              round(ft9,2),
                              round(ft10,2),
                              round(ft11,2),
                              round(ft12,2)],
        'Отставание':[round(pl1-ft1,2),
                      round(pl2-ft2,2),
                      round(pl3-ft3,2),
                      round(pl4-ft4,2),
                      round(pl5-ft5,2),
                      round(pl6-ft6,2),
                      round(pl7-ft7,2),
                      round(pl8-ft8,2),
                      round(pl9-ft9,2),
                      round(pl10-ft10,2),
                      round(pl11-ft11,2),
                      round(pl12-ft12,2)],
        'Выполнение, %':[round(ft1/pl1*100,2) if pl1>0 else '-',
                         round(ft2/pl2*100,2) if pl2>0 else '-',
                         round(ft3/pl3*100,2) if pl3>0 else '-',
                         round(ft4/pl4*100,2) if pl4>0 else '-',
                         round(ft5/pl5*100,2) if pl5>0 else '-',
                         round(ft6/pl6*100,2) if pl6>0 else '-',
                         round(ft7/pl7*100,2) if pl7>0 else '-',
                         round(ft8/pl8*100,2) if pl8>0 else '-',
                         round(ft9/pl9*100,2) if pl9>0 else '-',
                         round(ft10/pl10*100,2) if pl10>0 else '-',
                         round(ft11/pl11*100,2) if pl11>0 else '-',
                         round(ft12/pl12*100,2) if pl12>0 else '-',]
            }
    
    return pd.DataFrame(Planfact_Data)

# Список отчетов(датафреймов) по РЭС и их заполнение

Otcheti = []
for RES in RES_list:
    Otcheti.append(planfact(RES))

# Создание пустого датафрейма для отчета по ПО

Otchet_PO = pd.DataFrame({
        'Наименование работ':['Расчистка трасс ВЛ','Замена грозотроса','Замена изоляторов','Ремонт ВЛ 35 кВ и выше','Ремонт ВЛ 0.4-20 кВ','Ремонт КЛ 0.4 кВ и выше','Ремонт силовых трансформаторов','Ремонт  выключателей','Ремонт ОД, КЗ, разъединителей','Замена опорно-стержневых изоляторов','Ремонт ТП (ЗТП, КТП, РП)','Ремонт трансформаторов ТП (ЗТП, КТП, РП)'],
        'Ед. изм.':['Га', 'км', 'шт', 'км', 'км', 'км', 'шт', 'шт', 'шт', 'шт', 'шт', 'шт'],
        'План с начала года':[0,0,0,0,0,0,0,0,0,0,0,0],
        'Факт с начала года':[0,0,0,0,0,0,0,0,0,0,0,0],
        'Отставание':[0,0,0,0,0,0,0,0,0,0,0,0],
        'Выполнение, %':[0,0,0,0,0,0,0,0,0,0,0,0]})

# Заполнение отчета по ПО

count = 0
while count < len(Otcheti):  # сумма планов и фактов по всем отчетам РЭС
    Otchet_PO['План с начала года'] += Otcheti[count]['План с начала года']
    Otchet_PO['Факт с начала года'] += Otcheti[count]['Факт с начала года']
    count += 1
Otchet_PO['Отставание'] = Otchet_PO['План с начала года'] - Otchet_PO['Факт с начала года'] # вычисление отставания по каждой позиции отчета ПО
Otchet_PO['Выполнение, %'] = round(Otchet_PO['Факт с начала года']/Otchet_PO['План с начала года']*100,2) # вычисление % выполнения по каждой позиции отчета ПО

# Формирование спмсков пообъектных отставаний

# Функция выбора объетов с отставаниями по чистке по РЭС
def chistkaDolg(RES):
    Dolg_Data = pd.DataFrame(columns=['Объект', 'План', 'Факт', 'Отставние']) #Создание пустого датафрейма для отставаний по чистке
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Местоположение'] == RES) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'].str.contains("PMR[KT]")) &\
        (df['Вышестоящее ТехМесто'].str.contains('V[LSN]')) &\
        (df['Ключ образца'].str.contains('PMVL00[123]')) &\
        (df['Перерасчетный заказ'].str.contains("\d0[1234]1\d{8}"))]\
        ['Наименование ТМ верхнего уровня'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'].str.contains("PMR[KT]")) &\
            (df['Ключ образца'].str.contains('PMVL00[123]')) &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'].str.contains('PMVL00[123]')) &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj, pl, ft, pl-ft]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по чистке ЛЭП 35-110 кВ по ПО (контроль Россети)
def chistkaDolgPO():
    Dolg_Data = pd.DataFrame(columns=['Объект', 'План', 'Факт', 'Отставние']) #Создание пустого датафрейма для отставаний по чистке
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'].str.contains("PMR[KT]")) &\
        (df['Вышестоящее ТехМесто'].str.contains('VL')) &\
        (df['Ключ образца'].str.contains('PMVL00[123]')) &\
        (df['Перерасчетный заказ'].str.contains("\d0[34]1\d{8}"))]\
        ['Наименование ТМ верхнего уровня'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'].str.contains("PMR[KT]")) &\
            (df['Ключ образца'].str.contains('PMVL00[123]')) &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'].str.contains('PMVL00[123]')) &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj, pl, ft, pl-ft]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по замене ГТ по РЭС
def GrozotrosDolg(RES):
    Dolg_Data = pd.DataFrame(columns=['Объект', 'План', 'Факт', 'Отставние']) #Создание пустого датафрейма для отставаний
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Местоположение'] == RES) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'].str.contains("PMR[KT]")) &\
        (df['Вышестоящее ТехМесто'].str.contains('VL')) &\
        (df['Ключ образца'] == 'PMVL005') &\
        (df['Перерасчетный заказ'].str.contains("\d0[34]1\d{8}"))]\
        ['Наименование ТМ верхнего уровня'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'].str.contains("PMR[KT]")) &\
            (df['Ключ образца'] =='PMVL005') &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'] == 'PMVL005') &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj, pl, ft, pl-ft]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по замене ГТ по ПО (контроль Россети)
def GrozotrosDolgPO():
    Dolg_Data = pd.DataFrame(columns=['Объект', 'План', 'Факт', 'Отставние']) #Создание пустого датафрейма для отставаний
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'].str.contains("PMR[KT]")) &\
        (df['Вышестоящее ТехМесто'].str.contains('VL')) &\
        (df['Ключ образца'] == 'PMVL005') &\
        (df['Перерасчетный заказ'].str.contains("\d0[34]1\d{8}"))]\
        ['Наименование ТМ верхнего уровня'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'].str.contains("PMR[KT]")) &\
            (df['Ключ образца'] =='PMVL005') &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'] == 'PMVL005') &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj, pl, ft, pl-ft]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по замене изоляторов по РЭС
def IzolatorDolg(RES):
    Dolg_Data = pd.DataFrame(columns=['Объект', 'План', 'Факт', 'Отставние']) #Создание пустого датафрейма для отставаний 
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Местоположение'] == RES) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'].str.contains("PMR[KT]")) &\
        (df['Вышестоящее ТехМесто'].str.contains('V[LSN]')) &\
        (df['Ключ образца'].str.contains('PMVL004')|df['Ключ образца'].str.contains('PMVL03[12]')) &\
        (df['Перерасчетный заказ'].str.contains("\d0[1234]1\d{8}"))]\
        ['Наименование ТМ верхнего уровня'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'].str.contains("PMR[KT]")) &\
            (df['Ключ образца'].str.contains('PMVL004')|df['Ключ образца'].str.contains('PMVL03[12]')) &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'].str.contains('PMVL004')|df['Ключ образца'].str.contains('PMVL03[12]')) &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj, pl, ft, pl-ft]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по замене изоляторов по ПО (контроль Россети)
def IzolatorDolgPO():
    Dolg_Data = pd.DataFrame(columns=['Объект', 'План', 'Факт', 'Отставние']) #Создание пустого датафрейма для отставаний 
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'].str.contains("PMR[KT]")) &\
        (df['Вышестоящее ТехМесто'].str.contains('VL')) &\
        (df['Ключ образца'].str.contains('PMVL004')|df['Ключ образца'].str.contains('PMVL03[12]')) &\
        (df['Перерасчетный заказ'].str.contains("\d0[34]1\d{8}"))]\
        ['Наименование ТМ верхнего уровня'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'].str.contains("PMR[KT]")) &\
            (df['Ключ образца'].str.contains('PMVL004')|df['Ключ образца'].str.contains('PMVL03[12]')) &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'].str.contains('PMVL004')|df['Ключ образца'].str.contains('PMVL03[12]')) &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj, pl, ft, pl-ft]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по ремонту ВЛ 0,4-110 по РЭС - Все классы напряжения!!!
def RemontVLDolg(RES):
    Dolg_Data = pd.DataFrame(columns=['Объект', 'План', 'Факт', 'Отставние']) #Создание пустого датафрейма для отставаний 
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Местоположение'] == RES) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'].str.contains("PMR[KT]")) &\
        (df['Вышестоящее ТехМесто'].str.contains('V[LSN]')) &\
        (df['Ключ образца'] == 'PMVL019') &\
        (df['Перерасчетный заказ'].str.contains("\d0[1234]1\d{8}"))]\
        ['Наименование ТМ верхнего уровня'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'].str.contains("PMR[KT]")) &\
            (df['Ключ образца'] == 'PMVL019') &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'] == 'PMVL019') &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj, pl, ft, pl-ft]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по ремонту ВЛ 35-110 по ПО (контроль Россети)
def RemontVLDolgPO():
    Dolg_Data = pd.DataFrame(columns=['Объект', 'План', 'Факт', 'Отставние']) #Создание пустого датафрейма для отставаний 
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'].str.contains("PMR[KT]")) &\
        (df['Вышестоящее ТехМесто'].str.contains('VL')) &\
        (df['Ключ образца'] == 'PMVL019') &\
        (df['Перерасчетный заказ'].str.contains("\d0[34]1\d{8}"))]\
        ['Наименование ТМ верхнего уровня'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'].str.contains("PMR[KT]")) &\
            (df['Ключ образца'] == 'PMVL019') &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'] == 'PMVL019') &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj, pl, ft, pl-ft]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по ремонту КЛ 0,4-110 по РЭС
def RemontKLDolg(RES):
    Dolg_Data = pd.DataFrame(columns=['Объект', 'План', 'Факт', 'Отставние']) #Создание пустого датафрейма для отставаний 
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Местоположение'] == RES) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'].str.contains("PMR[KT]")) &\
        (df['Ключ образца'] == 'PMKL001') &\
        (df['Перерасчетный заказ'].str.contains("\d0[6789]1\d{8}"))]\
        ['Наименование ТМ верхнего уровня'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'].str.contains("PMR[KT]")) &\
            (df['Ключ образца'] == 'PMKL001') &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'].str.contains("PM[RV][KTA]")) &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'] == 'PMKL001') &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj, pl, ft, pl-ft]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по ремонту выключателей по РЭС
def RemontViklDolg(RES):
    Dolg_Data = pd.DataFrame(columns=['Объект']) #Создание пустого датафрейма для отставаний 
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Местоположение'] == RES) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'] == "PMRK") &\
        (df['Вышестоящее ТехМесто'].str.contains('PS')) &\
        (df['Ключ образца'].str.contains('PMQF00[12347]')) &\
        (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
        ['ТМ для ПС'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'] == "PMRK") &\
            (df['Ключ образца'].str.contains('PMQF00[12347]')) &\
            (df['ТМ для ПС'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'] == "PMRK") &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'].str.contains('PMQF00[12347]')) &\
            (df['ТМ для ПС'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по ремонту выключателей по ПО (контроль Россети)
def RemontViklDolgPO():
    Dolg_Data = pd.DataFrame(columns=['Объект']) #Создание пустого датафрейма для отставаний 
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'] == "PMRK") &\
        (df['Класс'].str.contains('10401010[23]\d{9}')) &\
        (df['Вышестоящее ТехМесто'].str.contains('PS')) &\
        (df['Ключ образца'].str.contains('PMQF00[12347]')) &\
        (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
        ['ТМ для ПС'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'] == "PMRK") &\
            (df['Класс'].str.contains('10401010[23]\d{9}')) &\
            (df['Ключ образца'].str.contains('PMQF00[12347]')) &\
            (df['ТМ для ПС'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'] == "PMRK") &\
            (df['Класс'].str.contains('10401010[23]\d{9}')) &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'].str.contains('PMQF00[12347]')) &\
            (df['ТМ для ПС'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по ремонту разъеденителей по РЭС
def RemontRazedDolg(RES):
    Dolg_Data = pd.DataFrame(columns=['Объект']) #Создание пустого датафрейма для отставаний 
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Местоположение'] == RES) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'] == "PMRK") &\
        (df['Вышестоящее ТехМесто'].str.contains('PS')) &\
        (df['Ключ образца'].str.contains('PMQR00[12]')) &\
        (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
        ['ТМ для ПС'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'] == "PMRK") &\
            (df['Ключ образца'].str.contains('PMQR00[12]')) &\
            (df['ТМ для ПС'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'] == "PMRK") &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'].str.contains('PMQR00[12]')) &\
            (df['ТМ для ПС'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по замене ОСИ по РЭС
def RemontOSIDolg(RES):
    Dolg_Data = pd.DataFrame(columns=['Объект', 'План', 'Факт', 'Отставние']) #Создание пустого датафрейма для отставаний 
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Местоположение'] == RES) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'] == "PMRK") &\
        (df['Вышестоящее ТехМесто'].str.contains('PS')) &\
        (df['Ключ образца'] == 'PMIZ003') &\
        (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
        ['ТМ для ПС'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'] == "PMRK") &\
            (df['Ключ образца'] == 'PMIZ003') &\
            (df['ТМ для ПС'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'] == "PMRK") &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'] == 'PMIZ003') &\
            (df['ТМ для ПС'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj, pl, ft, pl-ft]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по ремонту ТП по РЭС
def RemontTPDolg(RES):
    Dolg_Data = pd.DataFrame(columns=['Объект']) #Создание пустого датафрейма для отставаний 
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Местоположение'] == RES) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'] == "PMRK") &\
        (df['Вышестоящее ТехМесто'].str.contains('[TR]P')) &\
        (df['Ключ образца'] == "PMTP003") &\
        (df['Перерасчетный заказ'].str.contains("\d201\d{8}"))]\
        ['Наименование ТМ верхнего уровня'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'] == "PMRK") &\
            (df['Ключ образца'] == "PMTP003") &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'] == "PMRK") &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'] == "PMTP003") &\
            (df['Наименование ТМ верхнего уровня'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data

# Функция выбора объетов с отставаниями по ремонту трансформаторов по ПО (контроль Россети)
def RemontTransfDolgPO():
    Dolg_Data = pd.DataFrame(columns=['Объект']) #Создание пустого датафрейма для отставаний 
    AllPlanArray = df[ (df['Пользовательский статус'].str.contains("БЛОК")) &\
        (df['Запланированный конец'] <= DataOtcheta) &\
        (df['Вид заказа'] == "PMRK") &\
        (df['Вышестоящее ТехМесто'].str.contains('P[SM]')) &\
        (df['Ключ образца'] == "PMTR001") &\
        (df['Перерасчетный заказ'].str.contains("\d2[123]1\d{8}"))]\
        ['ТМ для ПС'].unique()                           # выбор уникальных значений в ст. 'Наименование ТМ верхнего уровня' по плановым показателям
    for obj in AllPlanArray:
        pl = df[(df['Пользовательский статус'].str.contains("БЛОК")) &\
            (df['Запланированный конец'] <= DataOtcheta) &\
            (df['Вид заказа'] == "PMRK") &\
            (df['Ключ образца'] == "PMTR001") &\
            (df['ТМ для ПС'] == obj)]\
            ['План ФП НУ'].sum()
        ft = df[ (df['Вид заказа'] == "PMRK") &\
            (df['Фактическая дата выполнения работ'] <= DataOtcheta) &\
            (df['Ключ образца'] == "PMTR001") &\
            (df['ТМ для ПС'] == obj)]\
            ['Факт ФП НУ'].sum()
        if pl > ft:
            Dolg_Data.loc[len(Dolg_Data)] = [obj]      # добавление строки в датафрейм по объектам где не выполняется план
                                   
    return Dolg_Data



































































